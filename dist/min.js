import ShaderProgram from"./gl/shaderprogram.js";import GameScreen from"./screens/gamescreen.js";import*as matrix4 from"./gl/matrix4.js";import InputHandler from"./inputhandler.js";class Game{static inputHandler;constructor(){this.supportsPerformance="undefined"!=typeof performance,this.canvas=document.getElementById("webgl-canvas"),this.width=this.canvas.width,this.height=this.canvas.height,this.gl=this.canvas.getContext("webgl"),console.log(this.gl),Game.inputHandler=new InputHandler(document),this.shaderProgram=new ShaderProgram(this.gl,"\n            precision highp float;\n\n            attribute vec4 vp;\n            attribute vec4 col;\n            attribute vec2 aUV;\n            uniform mat4 mvm;\n            uniform mat4 vm;\n            uniform mat4 pm;\n            varying vec4 vc;\n            varying vec2 uv;\n            varying float zDist;\n        \n            void main() {\n                gl_Position = pm * mvm * vp;\n                vc = col;\n                uv = aUV;\n                zDist = gl_Position.z;\n            }\n          ","\n            precision highp float;\n            varying vec4 vc;\n            varying vec2 uv;\n            varying float zDist;\n            uniform sampler2D s;\n            void main() {\n                //gl_FragColor = texture2D(s, uv) * vc;\n                vec4 col = texture2D(s, uv) * vc;\n                gl_FragColor = vec4(col.rgb-(zDist/15.0),1.0);\n            }\n        "),this.gamescreen=new GameScreen(this.gl,this.shaderProgram)}mainloop(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.gl.clearDepth(1),this.gl.clearColor(0,0,0,1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CCW),this.gl.enable(this.gl.CULL_FACE),this.gl.cullFace(this.gl.BACK),this.supportsPerformance?this.now=performance.now():this.now=Date.now();var e=this.now-this.previousUpdate;this.previousUpdate=this.now,this.gamescreen.tick(e/1e3),this.gamescreen.render()}}export default Game;class InputHandler{constructor(e){this.kp=[],this.kjp=[],e.addEventListener("keydown",this.handleKeyboardDownEvent.bind(this)),e.addEventListener("keyup",this.handleKeyboardUpEvent.bind(this))}handleKeyboardDownEvent(e){this.kp[e.keyCode]=!0}handleKeyboardUpEvent(e){this.kp[e.keyCode]&&(this.kjp[e.keyCode]=!0),this.kp[e.keyCode]=!1}isKeyDown(e){return this.kp[e]}wasKeyJustPressed(e){return!!this.kjp[e]&&(this.kjp[e]=!1,!0)}}export default InputHandler;import Game from"./game.js";window.onload=function(){var e=new Game;requestAnimationFrame((function t(){requestAnimationFrame(t),e.mainloop()}))};class Entity{constructor(e,t,r){this.position={x:e,y:t,z:r},this.tempVector={x:0,y:0,z:0},this.movement={x:0,y:0,z:0},this.radius=.4}getPosition(){return this.position}tick(e,t){}render(){}canMove(e,t,r){var i=Math.floor(t+.5+this.radius),s=Math.floor(r+.5+this.radius),a=Math.floor(t+.5-this.radius),o=Math.floor(r+.5-this.radius);return!e.getTile(i,s).b(this)&&(!e.getTile(a,s).b(this)&&(!e.getTile(i,o).b(this)&&!e.getTile(a,o).b(this)))}}export default Entity;import Game from"../game.js";import LevelRender from"../level/levelrender.js";import Entity from"./entity.js";class Player extends Entity{constructor(e,t,r){super(e,t,r),this.speed=3}tick(e,t){super.tick(e);let r=this.tempVector,i=this.position,s=Game.inputHandler;this.counter+=e;let a={x:0,y:0,z:0},o=LevelRender.camera.getDirection();s.isKeyDown(65)&&LevelRender.camera.rotate(6*e),s.isKeyDown(68)&&LevelRender.camera.rotate(-6*e),s.isKeyDown(87)&&(a.z=-6),s.isKeyDown(83)&&(a.z=6),0==a.x&&0==a.z||(r.x=o.x*a.z*e,r.y=o.y*a.z*e,r.z=o.z*a.z*e,r.x+=i.x,r.z+=i.z,this.canMove(t,r.x,i.z)&&(i.x+=r.x-i.x),this.canMove(t,i.x,r.z)&&(i.z+=r.z-i.z)),LevelRender.camera.setPos(i.x,.2,i.z)}}export default Player;import*as matrix4 from"./matrix4.js";import*as quaternion from"./quaternion.js";class Camera{constructor(e,t,r,i){this.fieldOfView=64*Math.PI/180,this.aspect=e.canvas.clientWidth/e.canvas.clientHeight,this.zNear=.1,this.zFar=1e3,this.pm=matrix4.create(),this.cm=matrix4.create(),this.vm=matrix4.create(),this.pos={x:t,y:r,z:i},this.currentRot=0,matrix4.perspective(this.pm,this.fieldOfView,this.aspect,this.zNear,this.zFar),this.update(),this.quaternion=quaternion.create()}rotate(e){this.currentRot+=e,this.currentRot=this.currentRot%(2*Math.PI),this.currentRot<0&&(this.currentRot=2*Math.PI),quaternion.fromEuler(this.quaternion,0,this.getRotationDeg(),0)}getRotationDeg(){return this.currentRot*(180/Math.PI)}getQuaternion(){return this.quaternion}setPos(e,t,r){this.pos={x:e,y:t,z:r},this.pm=matrix4.create(),matrix4.perspective(this.pm,this.fieldOfView,this.aspect,this.zNear,this.zFar),this.update()}getDirection(){return{x:Math.sin(this.currentRot),y:0,z:Math.cos(this.currentRot)}}update(){matrix4.rotateY(this.pm,this.pm,-this.currentRot),matrix4.translate(this.pm,this.pm,[-this.pos.x,-this.pos.y,-this.pos.z])}}export default Camera;export let ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array;import*as glMatrix from"./common.js";export function create(){let e=new glMatrix.ARRAY_TYPE(16);return glMatrix.ARRAY_TYPE!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}export function perspective(e,t,r,i,s){let a,o=1/Math.tan(t/2);return e[0]=o/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=s&&s!==1/0?(a=1/(i-s),e[10]=(s+i)*a,e[14]=2*s*i*a):(e[10]=-1,e[14]=-2*i),e}export function translate(e,t,r){let i,s,a,o,n,h,l,c,u,m,f,d,p=r[0],v=r[1],g=r[2];return t===e?(e[12]=t[0]*p+t[4]*v+t[8]*g+t[12],e[13]=t[1]*p+t[5]*v+t[9]*g+t[13],e[14]=t[2]*p+t[6]*v+t[10]*g+t[14],e[15]=t[3]*p+t[7]*v+t[11]*g+t[15]):(i=t[0],s=t[1],a=t[2],o=t[3],n=t[4],h=t[5],l=t[6],c=t[7],u=t[8],m=t[9],f=t[10],d=t[11],e[0]=i,e[1]=s,e[2]=a,e[3]=o,e[4]=n,e[5]=h,e[6]=l,e[7]=c,e[8]=u,e[9]=m,e[10]=f,e[11]=d,e[12]=i*p+n*v+u*g+t[12],e[13]=s*p+h*v+m*g+t[13],e[14]=a*p+l*v+f*g+t[14],e[15]=o*p+c*v+d*g+t[15]),e}export function fromTranslation(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}export function rotateY(e,t,r){let i=Math.sin(r),s=Math.cos(r),a=t[0],o=t[1],n=t[2],h=t[3],l=t[8],c=t[9],u=t[10],m=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*s-l*i,e[1]=o*s-c*i,e[2]=n*s-u*i,e[3]=h*s-m*i,e[8]=a*i+l*s,e[9]=o*i+c*s,e[10]=n*i+u*s,e[11]=h*i+m*s,e}export function fromRotationTranslation(e,t,r){let i=t[0],s=t[1],a=t[2],o=t[3],n=i+i,h=s+s,l=a+a,c=i*n,u=i*h,m=i*l,f=s*h,d=s*l,p=a*l,v=o*n,g=o*h,x=o*l;return e[0]=1-(f+p),e[1]=u+x,e[2]=m-g,e[3]=0,e[4]=u-x,e[5]=1-(c+p),e[6]=d+v,e[7]=0,e[8]=m+g,e[9]=d-v,e[10]=1-(c+f),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}import*as matrix4 from"./matrix4.js";import*as quaternion from"./quaternion.js";class Mesh{constructor(e,t,r,i){this.verticies=[],this.colors=[],this.uvs=[],this.modelViewMatrix=matrix4.create(),this.position={x:t,y:r,z:i},this.gl=e,this.quaternion=quaternion.create(),this.positionBuffer=e.createBuffer(),this.colorBuffer=e.createBuffer(),this.uvBuffer=e.createBuffer(),this.indiciesBuffer=e.createBuffer(),this.verticiesBuffer32=new Float32Array(164e3),this.colorArrayBuffer32=new Float32Array(328e4),this.uletrayBuffer32=new Float32Array(328e4),this.indiciesBuffer16=new Uint16Array(328e4),matrix4.fromTranslation(this.modelViewMatrix,[this.position.x,this.position.y,this.position.z])}addVerticies(e,t,r){e.forEach(e=>{this.verticies.push(e)}),t.forEach(e=>{this.colors.push(e)}),r.forEach(e=>{this.uvs.push(e)})}updateMesh(){let e=this.gl,t=this.verticies.length/4,r=0;this.verticiesBuffer32;let i=0;this.verticies.forEach(e=>{this.verticiesBuffer32[i]=e[0],this.verticiesBuffer32[i+1]=e[1],this.verticiesBuffer32[i+2]=e[2],i+=3}),i=0,this.colors.forEach(e=>{this.colorArrayBuffer32[i]=e[0],this.colorArrayBuffer32[i+1]=e[1],this.colorArrayBuffer32[i+2]=e[2],this.colorArrayBuffer32[i+3]=e[3],i+=4}),i=0,this.uvs.forEach(e=>{this.uletrayBuffer32[i]=e[0],this.uletrayBuffer32[i+1]=e[1],i+=2}),i=0;for(let e=0;e<t;e++)this.indiciesBuffer16[i]=0+r,this.indiciesBuffer16[i+1]=1+r,this.indiciesBuffer16[i+2]=2+r,this.indiciesBuffer16[i+3]=0+r,this.indiciesBuffer16[i+4]=2+r,this.indiciesBuffer16[i+5]=3+r,r+=4,i+=6;this.numberOfIndicies=i,e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.bufferData(e.ARRAY_BUFFER,this.verticiesBuffer32,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,this.colorBuffer),e.bufferData(e.ARRAY_BUFFER,this.colorArrayBuffer32,e.DYNAMIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,this.uvBuffer),e.bufferData(e.ARRAY_BUFFER,this.uletrayBuffer32,e.DYNAMIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indiciesBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indiciesBuffer16,e.DYNAMIC_DRAW)}translate(e,t,r){matrix4.translate(this.modelViewMatrix,this.modelViewMatrix,[e,t,r])}rotateY(e){quaternion.rotateY(this.quaternion,this.quaternion,e),matrix4.fromRotationTranslation(this.modelViewMatrix,this.quaternion,[this.position.x,this.position.y,this.position.z])}setQuaternion(e){this.quaternion=e,matrix4.fromRotationTranslation(this.modelViewMatrix,this.quaternion,[this.position.x,this.position.y,this.position.z])}setRotation(e){quaternion.fromEuler(this.quaternion,0,e,0),matrix4.fromRotationTranslation(this.modelViewMatrix,this.quaternion,[this.position.x,this.position.y,this.position.z])}render(e,t,r,i,s){e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.vertexAttribPointer(t.locations.attribLocations.vertexPosition,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t.locations.attribLocations.vertexPosition),e.bindBuffer(e.ARRAY_BUFFER,this.colorBuffer),e.vertexAttribPointer(t.locations.attribLocations.color,4,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t.locations.attribLocations.color),e.bindBuffer(e.ARRAY_BUFFER,this.uvBuffer),e.vertexAttribPointer(t.locations.attribLocations.uv,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t.locations.attribLocations.uv),e.useProgram(t.shaderProgram),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,s.tex),e.uniform1i(t.locations.uniformLocations.uSampler,0),e.uniformMatrix4fv(t.locations.uniformLocations.projectionMatrix,!1,r),e.uniformMatrix4fv(t.locations.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix),e.uniformMatrix4fv(t.locations.uniformLocations.viewMatrix,!1,i),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indiciesBuffer),e.drawElements(e.TRIANGLES,this.numberOfIndicies,e.UNSIGNED_SHORT,0)}}export default Mesh;import*as glMatrix from"./common.js";export function create(){let e=new glMatrix.ARRAY_TYPE(4);return glMatrix.ARRAY_TYPE!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}export function fromEuler(e,t,r,i){let s=.5*Math.PI/180;t*=s,r*=s,i*=s;let a=Math.sin(t),o=Math.cos(t),n=Math.sin(r),h=Math.cos(r),l=Math.sin(i),c=Math.cos(i);return e[0]=a*h*c-o*n*l,e[1]=o*n*c+a*h*l,e[2]=o*h*l-a*n*c,e[3]=o*h*c+a*n*l,e}export function rotateY(e,t,r){r*=.5;let i=t[0],s=t[1],a=t[2],o=t[3],n=Math.sin(r),h=Math.cos(r);return e[0]=i*h-a*n,e[1]=s*h+o*n,e[2]=a*h+i*n,e[3]=o*h-s*n,e}class ShaderProgram{constructor(e,t,r){this.vertexshader=this.loadShader(e,e.VERTEX_SHADER,t),this.fragmentshader=this.loadShader(e,e.FRAGMENT_SHADER,r),this.shaderProgram=e.createProgram(),e.attachShader(this.shaderProgram,this.vertexshader),e.attachShader(this.shaderProgram,this.fragmentshader),e.linkProgram(this.shaderProgram),e.getProgramParameter(this.shaderProgram,e.LINK_STATUS)||alert("Unable to initialize the shader program: "+e.getProgramInfoLog(this.shaderProgram)),this.locations={attribLocations:{vertexPosition:e.getAttribLocation(this.shaderProgram,"vp"),color:e.getAttribLocation(this.shaderProgram,"col"),uv:e.getAttribLocation(this.shaderProgram,"aUV")},uniformLocations:{projectionMatrix:e.getUniformLocation(this.shaderProgram,"pm"),viewMatrix:e.getUniformLocation(this.shaderProgram,"vm"),modelViewMatrix:e.getUniformLocation(this.shaderProgram,"mvm"),uSampler:e.getUniformLocation(this.shaderProgram,"s")}}}loadShader(e,t,r){const i=e.createShader(t);return e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)?i:(alert("An error occurred compiling the shaders: "+e.getShaderInfoLog(i)),e.deleteShader(i),null)}}export default ShaderProgram;class Texture{constructor(e,t){this.tex=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.tex);let r=e.RGBA,i=e.RGBA,s=e.UNSIGNED_BYTE,a=new Uint8Array([255,255,255,255]);e.texImage2D(e.TEXTURE_2D,0,r,1,1,0,i,s,a);let o=new Image;o.onload=()=>{e.bindTexture(e.TEXTURE_2D,this.tex),e.texImage2D(e.TEXTURE_2D,0,r,i,s,o),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)},o.src=t}}export default Texture;import LevelRender from"./levelrender.js";import WallTile from"../tiles/walltile.js";import Tiles from"../tiles/tiles.js";import Player from"../entities/player.js";import Mesh from"../gl/mesh.js";class Level{constructor(e,t,r){this.levelrender=new LevelRender(e,t),new Tiles,this.tiles=new Array(4096),this.tiles.fill(Tiles.airtile),this.entities=new Array,this.read(r,()=>{this.parse()})}read(e,t){var r=document.createElement("canvas");r.width=64,r.height=64;var i=r.getContext("2d"),s=new Image;s.src="assets/"+e+".png";var a=this;s.onload=function(){i.drawImage(s,0,0);for(let t=0;t<64;t++)for(let r=0;r<64;r++){var e=new Uint32Array(i.getImageData(t,r,1,1).data.buffer);4294967295==e&&(a.tiles[t+64*r]=new WallTile),4278255360==e&&a.entities.push(new Player(t,0,r))}t()}}parse(){let e=this.levelrender.start(),t=this.levelrender.start(),r=this.levelrender.start();for(let i=0;i<64;i++)for(let s=0;s<64;s++){if(this.tiles[i+64*s]!=Tiles.airtile){let t=this.getTile(i,s+1)==Tiles.airtile,r=this.getTile(i,s-1)==Tiles.airtile,a=this.getTile(i-1,s)==Tiles.airtile,o=this.getTile(i+1,s)==Tiles.airtile;a&&this.levelrender.left(e,i,0,s),o&&this.levelrender.right(e,i,0,s),t&&this.levelrender.front(e,i,0,s),r&&this.levelrender.back(e,i,0,s)}else this.levelrender.floor(t,i,-1,s),this.levelrender.roof(r,i,1,s)}this.levelrender.endWall(e),this.levelrender.endRoof(r),this.levelrender.endFloor(t)}getTile(e,t){var r=this.tiles[e+64*t];return null==r?Tiles.airtile:r}tick(e){this.levelrender.tick(e),this.entities.forEach(t=>{t.tick(e,this)})}render(){this.levelrender.render()}}export default Level;import Camera from"../gl/camera.js";import Texture from"../gl/texture.js";import Mesh from"../gl/mesh.js";const s=.5;class LevelRender{static camera;constructor(e,t){this.shaderprogram=t,this.gl=e,LevelRender.camera=new Camera(e,0,-.2,0),this.wallTexture=new Texture(e,"./assets/bricks.png"),this.floorTexture=new Texture(e,"./assets/floor.png"),this.roofTexture=new Texture(e,"./assets/roof.png"),this.wallmeshes=[],this.roofMeshes=[],this.floorMeshes=[];let r=[],i=[],s=[],a=.5;s.push([0,0],[1,0],[1,1],[0,1]),r.push([0-a,0-a,.5],[.5,0-a,.5],[.5,.5,.5],[0-a,.5,.5]),i.push([1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]),this.mesh=new Mesh(e,2,0,2),this.mesh.addVerticies(r,i,s),this.mesh.updateMesh()}start(){return{m:new Mesh(this.gl,0,0,0),v:[],c:[],u:[]}}endWall(e){console.log(e),e.m.addVerticies(e.v,e.c,e.u),e.m.updateMesh(),this.wallmeshes.push(e.m)}endRoof(e){console.log(e),e.m.addVerticies(e.v,e.c,e.u),e.m.updateMesh(),this.roofMeshes.push(e.m)}endFloor(e){console.log(e),e.m.addVerticies(e.v,e.c,e.u),e.m.updateMesh(),this.floorMeshes.push(e.m)}ac(e){e.push([1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1])}roof(e,t,r,i){this.ac(e.c),e.u.push([0,0],[1,0],[1,1],[0,1]),e.v.push([t-s,r-s,i-s],[t+s,r-s,i-s],[t+s,r-s,i+s],[t-s,r-s,i+s])}floor(e,t,r,i){this.ac(e.c),e.u.push([1,0],[0,0],[0,1],[1,1]),e.v.push([t-s,r+s,i-s],[t-s,r+s,i+s],[t+s,r+s,i+s],[t+s,r+s,i-s])}left(e,t,r,i){this.ac(e.c),e.u.push([0,1],[1,1],[1,0],[0,0]),e.v.push([t-s,r-s,i-s],[t-s,r-s,i+s],[t-s,r+s,i+s],[t-s,r+s,i-s])}right(e,t,r,i){this.ac(e.c),e.u.push([1,1],[1,0],[0,0],[0,1]),e.v.push([t+s,r-s,i-s],[t+s,r+s,i-s],[t+s,r+s,i+s],[t+s,r-s,i+s])}front(e,t,r,i){this.ac(e.c),e.u.push([1,1],[0,1],[0,0],[1,0]),e.v.push([t-s,r-s,i+s],[t+s,r-s,i+s],[t+s,r+s,i+s],[t-s,r+s,i+s])}back(e,t,r,i){this.ac(e.c),e.u.push([1,1],[1,0],[0,0],[0,1]),e.v.push([t-s,r-s,i-s],[t-s,r+s,i-s],[t+s,r+s,i-s],[t+s,r-s,i-s])}tick(e){this.mesh.setQuaternion(LevelRender.camera.getQuaternion())}render(){this.wallmeshes.forEach(e=>{e.render(this.gl,this.shaderprogram,LevelRender.camera.pm,LevelRender.camera.vm,this.wallTexture)}),this.roofMeshes.forEach(e=>{e.render(this.gl,this.shaderprogram,LevelRender.camera.pm,LevelRender.camera.vm,this.roofTexture)}),this.floorMeshes.forEach(e=>{e.render(this.gl,this.shaderprogram,LevelRender.camera.pm,LevelRender.camera.vm,this.floorTexture)}),this.mesh.render(this.gl,this.shaderprogram,LevelRender.camera.pm,LevelRender.camera.vm,this.floorTexture)}}export default LevelRender;import Level from"../level/level.js";class GameScreen{constructor(e,t){this.gl=e,this.shaderprogram=t,this.level=new Level(this.gl,this.shaderprogram,"level1")}tick(e){this.level.tick(e)}render(){this.level.render()}}export default GameScreen;import Tile from"./tile.js";class AirTile extends Tile{constructor(){super()}b(e){return!1}}export default AirTile;class Tile{constructor(){}b(e){return!0}}export default Tile;import WallTile from"./walltile.js";import AirTile from"./airtile.js";class Tiles{static walltile;static airtile;constructor(){Tiles.walltile=new WallTile,Tiles.airtile=new AirTile}}export default Tiles;import Tile from"./tile.js";class WallTile extends Tile{constructor(){super()}}export default WallTile;